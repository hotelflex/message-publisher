{
  "_args": [
    [
      {
        "raw": "pretty-quick@^1.6.0",
        "scope": null,
        "escapedName": "pretty-quick",
        "name": "pretty-quick",
        "rawSpec": "^1.6.0",
        "spec": ">=1.6.0 <2.0.0",
        "type": "range"
      },
      "/Users/richardturnbull/dev/lib/message-publisher"
    ]
  ],
  "_from": "pretty-quick@^1.6.0",
  "_hasShrinkwrap": false,
  "_id": "pretty-quick@1.11.1",
  "_location": "/pretty-quick",
  "_nodeVersion": "9.11.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/pretty-quick_1.11.1_1560514148616_0.31143648709480365"
  },
  "_npmUser": {
    "name": "azz",
    "email": "derflatulator@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "pretty-quick@^1.6.0",
    "scope": null,
    "escapedName": "pretty-quick",
    "name": "pretty-quick",
    "rawSpec": "^1.6.0",
    "spec": ">=1.6.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/pretty-quick/-/pretty-quick-1.11.1.tgz",
  "_shasum": "462ffa2b93d24c05b7a0c3a001e08601a0c55ee4",
  "_shrinkwrap": null,
  "_spec": "pretty-quick@^1.6.0",
  "_where": "/Users/richardturnbull/dev/lib/message-publisher",
  "author": {
    "name": "Lucas Azzola",
    "email": "@azz"
  },
  "bin": {
    "pretty-quick": "./bin/pretty-quick.js"
  },
  "bugs": {
    "url": "https://github.com/azz/pretty-quick/issues"
  },
  "dependencies": {
    "chalk": "^2.3.0",
    "execa": "^0.8.0",
    "find-up": "^2.1.0",
    "ignore": "^3.3.7",
    "mri": "^1.1.0",
    "multimatch": "^3.0.0"
  },
  "description": "Get Pretty Quick",
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-core": "^6.26.0",
    "babel-preset-env": "^1.6.1",
    "eslint": "^4.15.0",
    "eslint-config-prettier": "^2.9.0",
    "eslint-plugin-jest": "^21.5.0",
    "eslint-plugin-prettier": "^2.4.0",
    "husky": "^0.14.3",
    "jest": "^22.0.4",
    "mock-fs": "^4.4.2",
    "prettier": "1.9.2",
    "semantic-release": "^11.0.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-kSXCkcETfak7EQXz6WOkCeCqpbC4GIzrN/vaneTGMP/fAtD8NerA9bPhCUqHAks1geo7biZNl5uEMPceeneLuA==",
    "shasum": "462ffa2b93d24c05b7a0c3a001e08601a0c55ee4",
    "tarball": "https://registry.npmjs.org/pretty-quick/-/pretty-quick-1.11.1.tgz",
    "fileCount": 14,
    "unpackedSize": 47934,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdA45lCRA9TVsSAnZWagAAiokQAI70hwPGpxSRGqeuL5Du\njizeG5Ud2gVPuc/GCsZ7YJkRpAdP6Hg1EHYJOqNG0QOSfOMTKIIKk1rAZ9M4\n8LKFCghd8vkjL2RfE4VuWiOnmV4TGw9Fcm1wBYCdzyUVfqTxnc4Qvgv+OX0b\n2nYt2wPOBfTmBranP1ndlJB1rsCV8RsQuhWDRWjGG665bQwL66UyuzpBZvFA\neAf4z8fFtgitrP03+7UbtcOlQrwikZttd5FFNKduOdMKr0q23weQ9vUXG89H\n2WPKMkurTxyTO/rUw0h9gJLWjcfG5Pe2GjuWL3hXkpDSTln2ujDOU2+ZKkl3\nIY5bY1h6MxTSrUcf3cipwUwxvQDKztmhX4ScKo9RP2lsmP/YfAgIq5rxJOWi\nCIJ7XqCyOF6ShTPzMZ6sUtbpmekyRz4tpgA4O5MKaSmMev3YrFpRojt8lrtQ\nUHUunPLVMKEGqXEmQPX7DNL24H2Z5GRGU4G1BX7//CYN5UPwaJo+XtRhzs0f\nSXEL9EBSI74Zf1kb+8GsblxIIMT2Fu7rV6BtkOuhpkfcajKKpxT5o7zQ2Ugz\n1T1OqFS4O7rGRjCHbAazTuPntp0MkDU3kbOJ8s75D+48TEo8z+Q729eydDPK\n+iK2/UuFxG0sgPUwsxQ/NPYWEZDbIw+psO7FIWKI7BnzgQldKeCsEYV2kcDk\n4bqu\r\n=REhA\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "bin",
    "dist",
    "img"
  ],
  "gitHead": "fd2048191b5ddcd44a02c23e6369c3c4d754a8d0",
  "homepage": "https://github.com/azz/pretty-quick#readme",
  "keywords": [
    "git",
    "mercurial",
    "hg",
    "prettier",
    "pretty-quick",
    "formatting",
    "code",
    "vcs",
    "precommit"
  ],
  "license": "MIT",
  "main": "./dist",
  "maintainers": [
    {
      "name": "azz",
      "email": "derflatulator@gmail.com"
    }
  ],
  "name": "pretty-quick",
  "optionalDependencies": {},
  "peerDependencies": {
    "prettier": ">=1.8.0"
  },
  "readme": "# `pretty-quick`\n\n[![Travis](https://img.shields.io/travis/azz/pretty-quick.svg?style=flat-square)](https://travis-ci.org/azz/pretty-quick)\n[![Prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square)](https://github.com/prettier/prettier)\n[![npm](https://img.shields.io/npm/v/pretty-quick.svg?style=flat-square)](https://npmjs.org/pretty-quick)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg?style=flat-square)](https://github.com/semantic-release/semantic-release)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square)](LICENSE)\n\n> Get Pretty Quick\n\nRuns [Prettier](https://prettier.io) on your changed files.\n\n![demo](./img/demo.gif)\n\nSupported source control managers:\n\n* Git\n* Mercurial\n\n## Install\n\nWith `yarn`:\n\n```shellsession\nyarn add --dev prettier pretty-quick\n```\n\nWith `npm`:\n\n```shellsession\nnpm install --save-dev prettier pretty-quick\n```\n\n## Usage\n\nWith `yarn`:\n\n```shellsession\nyarn pretty-quick\n```\n\nWith [`npx`](https://npm.im/npx):\n\n```shellsession\nnpx pretty-quick\n```\n\nWith `npm`:\n\n1. Add `\"pretty-quick\": \"pretty-quick\"` to the scripts section of `package.json`.\n2. `npm run pretty-quick`\n\n## Pre-Commit Hook\n\nYou can run `pretty-quick` as a pre-commit hook using [`husky`](https://github.com/typicode/husky).\n\n> For Mercurial have a look at [`husky-hg`](https://github.com/TobiasTimm/husky-hg)\n\n```shellstream\nyarn add --dev husky\n```\n\nIn `package.json`, add:\n\n```\n\"husky\": {\n  \"hooks\": {\n    \"pre-commit\": \"pretty-quick --staged\"\n  }\n}\n```\n\n![demo](./img/precommit.gif)\n\n## CLI Flags\n\n### `--staged` (only git)\n\nPre-commit mode. Under this flag only staged files will be formatted, and they will be re-staged after formatting.\n\nPartially staged files will not be re-staged after formatting and pretty-quick will exit with a non-zero exit code. The intent is to abort the git commit and allow the user to amend their selective staging to include formatting fixes.\n\n### `--no-restage` (only git)\n\nUse with the `--staged` flag to skip re-staging files after formatting.\n\n### `--branch`\n\nWhen not in `staged` pre-commit mode, use this flag to compare changes with the specified branch. Defaults to `master` (git) / `default` (hg) branch.\n\n### `--pattern`\n\nFilters the files for the given [minimatch](https://github.com/isaacs/minimatch) pattern.  \nFor example `pretty-quick --pattern \"**/*.*(js|jsx)\"` or `pretty-quick --pattern \"**/*.js\" --pattern \"**/*.jsx\"`\n\n### `--verbose`\n\nOutputs the name of each file right before it is proccessed. This can be useful if Prettier throws an error and you can't identify which file is causing the problem.\n\n### `--bail`\n\nPrevent `git commit` if any files are fixed.\n\n### `--check`\n\nCheck that files are correctly formatted, but don't format them. This is useful on CI to verify that all changed files in the current branch were correctly formatted.\n\n<!-- Undocumented = Unsupported :D\n\n### `--config`\n\nPath to a `.prettierrc` file.\n\n### `--since`\n\nA SCM revision such as a git commit hash or ref.\n\nFor example `pretty-quick --since HEAD` will format only staged files.\n\n-->\n\n## Configuration and Ignore Files\n\n`pretty-quick` will respect your [`.prettierrc`](https://prettier.io/docs/en/configuration), [`.prettierignore`](https://prettier.io/docs/en/ignore#ignoring-files), and [`.editorconfig`](http://editorconfig.org/) files, so there's no additional setup required. Configuration files will be found by searching up the file system. `.prettierignore` files are only found from the repository root and the working directory that the command was executed from.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/azz/pretty-quick.git"
  },
  "scripts": {
    "build": "babel src -d dist --copy-files --ignore __tests__",
    "lint": "eslint . --ignore-path=.gitignore",
    "precommit": "./bin/pretty-quick.js --staged",
    "prepublishOnly": "yarn build",
    "pretty-quick": "./bin/pretty-quick.js",
    "semantic-release": "semantic-release",
    "test": "jest"
  },
  "version": "1.11.1"
}
